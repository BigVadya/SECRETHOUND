"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SecretHound
–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
"""

import subprocess
import sys
import os
import re
from pathlib import Path
from typing import List, Tuple, Optional
from rich.console import Console
from rich.table import Table
from rich.progress import Progress, SpinnerColumn, TextColumn, BarColumn

console = Console()

class SecretHoundUpdater:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SecretHound"""
    
    def __init__(self):
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        current_path = Path.cwd()
        self.project_root = None
        self.pyproject_path = None
        self.requirements_path = None
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç –º–æ–¥—É–ª—è
        try:
            module_path = Path(__file__)
            # –ò—â–µ–º pyproject.toml –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö –æ—Ç –º–æ–¥—É–ª—è
            search_path = module_path.parent
            while search_path != search_path.parent:
                pyproject_candidate = search_path / "pyproject.toml"
                if pyproject_candidate.exists():
                    self.project_root = search_path
                    self.pyproject_path = pyproject_candidate
                    self.requirements_path = search_path / "requirements.txt"
                    break
                search_path = search_path.parent
        except Exception:
            pass
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –º–æ–¥—É–ª—å, –∏—â–µ–º –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö
        if not self.project_root:
            search_path = current_path
            while search_path != search_path.parent:
                pyproject_candidate = search_path / "pyproject.toml"
                if pyproject_candidate.exists():
                    self.project_root = search_path
                    self.pyproject_path = pyproject_candidate
                    self.requirements_path = search_path / "requirements.txt"
                    break
                search_path = search_path.parent
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: —Ç–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è = {current_path}")
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: project_root = {self.project_root}")
        print(f"üîç –û—Ç–ª–∞–¥–∫–∞: pyproject_path = {self.pyproject_path}")
        if self.pyproject_path:
            print(f"üîç –û—Ç–ª–∞–¥–∫–∞: pyproject_path.exists() = {self.pyproject_path.exists()}")
        
    def run_command(self, cmd: str, description: str) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
        console.print(f"üîÑ {description}...")
        try:
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            if result.returncode == 0:
                console.print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
                return True, result.stdout.strip()
            else:
                console.print(f"‚ùå {description} - –æ—à–∏–±–∫–∞")
                console.print(f"   –û—à–∏–±–∫–∞: {result.stderr.strip()}")
                return False, result.stderr.strip()
        except Exception as e:
            console.print(f"‚ùå {description} - –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
            return False, str(e)
    
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            console.print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
            return False
        console.print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
        return True
    
    def get_current_dependencies(self) -> List[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ pyproject.toml"""
        if not self.pyproject_path.exists():
            return []
        
        with open(self.pyproject_path, 'r') as f:
            content = f.read()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = []
        lines = content.split('\n')
        in_dependencies = False
        
        for line in lines:
            if 'dependencies = [' in line:
                in_dependencies = True
                continue
            elif in_dependencies and line.strip() == ']':
                break
            elif in_dependencies and line.strip().startswith('"'):
                dep = line.strip().strip('",')
                if dep and not dep.startswith('#'):
                    dependencies.append(dep)
        
        return dependencies
    
    def update_dependencies(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞"""
        console.print("\nüì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π)
        core_dependencies = [
            "rich",
            "typer", 
            "aiofiles",
            "aiohttp"
        ]
        
        success_count = 0
        for dep in core_dependencies:
            cmd = f"pip install --user --break-system-packages --upgrade {dep}"
            success, _ = self.run_command(cmd, f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {dep}")
            if success:
                success_count += 1
        
        console.print(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ {success_count}/{len(core_dependencies)} –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        return success_count == len(core_dependencies)
    
    def test_project_modules(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞"""
        console.print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞...")
        
        tests = [
            ("python -c 'import secrethound'", "–ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è"),
            ("python -c 'from secrethound.utils.sensitive_patterns import PATTERNS; print(f\"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PATTERNS)} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\")'", "–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"),
            ("python -c 'from secrethound.utils.sensitive_patterns_big import PATTERNS; print(f\"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(PATTERNS)} —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤\")'", "–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"),
            ("python -c 'from secrethound.utils.duplicate_finder import DuplicateFinder'", "–¢–µ—Å—Ç DuplicateFinder"),
            ("python -c 'from secrethound.utils.web_scanner import WebScanner'", "–¢–µ—Å—Ç WebScanner"),
            ("python -c 'from secrethound.utils.file_formats import SUPPORTED_EXTENSIONS'", "–¢–µ—Å—Ç file_formats"),
            ("python -m secrethound.main --help", "–¢–µ—Å—Ç CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        ]
        
        success_count = 0
        with Progress(
            SpinnerColumn(),
            TextColumn("[progress.description]{task.description}"),
            BarColumn(),
            console=console
        ) as progress:
            task = progress.add_task("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π...", total=len(tests))
            
            for cmd, description in tests:
                success, _ = self.run_command(cmd, description)
                if success:
                    success_count += 1
                progress.advance(task)
        
        console.print(f"üìä –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {success_count}/{len(tests)} –º–æ–¥—É–ª–µ–π")
        return success_count == len(tests)
    
    def update_version(self) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞"""
        console.print("\nüìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        if not self.pyproject_path.exists():
            console.print("‚ùå –§–∞–π–ª pyproject.toml –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        with open(self.pyproject_path, 'r') as f:
            content = f.read()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –≤–µ—Ä—Å–∏–µ–π
        version_match = re.search(r'version = "(\d+\.\d+\.\d+)"', content)
        if not version_match:
            console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–µ—Ä—Å–∏—é –≤ pyproject.toml")
            return False
        
        current_version = version_match.group(1)
        major, minor, patch = map(int, current_version.split('.'))
        new_version = f"{major}.{minor}.{patch + 1}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        new_content = re.sub(r'version = "\d+\.\d+\.\d+"', f'version = "{new_version}"', content)
        
        with open(self.pyproject_path, 'w') as f:
            f.write(new_content)
        
        console.print(f"‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {current_version} ‚Üí {new_version}")
        return True
    
    def clean_dependencies(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π"""
        console.print("\nüßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º pyproject.toml
        if self.pyproject_path.exists():
            with open(self.pyproject_path, 'r') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            replacements = [
                (r'rich>=14\.1\.0', 'rich>=14.0.0'),
                (r'typer>=0\.16\.0', 'typer>=0.9.0'),
                (r'aiofiles>=24\.1\.0', 'aiofiles>=23.0.0'),
                (r'aiohttp>=3\.12\.0', 'aiohttp>=3.8.0'),
                (r'pytest>=7\.4\.3', 'pytest>=7.0.0'),
                (r'pytest-asyncio>=0\.21\.1', 'pytest-asyncio>=0.21.0'),
                (r'pytest-cov>=4\.1\.0', 'pytest-cov>=4.0.0')
            ]
            
            for old, new in replacements:
                content = re.sub(old, new, content)
            
            with open(self.pyproject_path, 'w') as f:
                f.write(content)
            
            console.print("‚úÖ pyproject.toml –æ—á–∏—â–µ–Ω –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º requirements.txt
        if self.requirements_path.exists():
            with open(self.requirements_path, 'r') as f:
                content = f.read()
            
            # –ó–∞–º–µ–Ω—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
            replacements = [
                (r'rich>=14\.1\.0', 'rich>=14.0.0'),
                (r'typer>=0\.16\.0', 'typer>=0.9.0'),
                (r'aiofiles>=24\.1\.0', 'aiofiles>=23.0.0'),
                (r'aiohttp>=3\.12\.0', 'aiohttp>=3.8.0'),
                (r'pytest>=7\.4\.3', 'pytest>=7.0.0'),
                (r'pytest-asyncio>=0\.21\.1', 'pytest-asyncio>=0.21.0'),
                (r'pytest-cov>=4\.1\.0', 'pytest-cov>=4.0.0')
            ]
            
            for old, new in replacements:
                content = re.sub(old, new, content)
            
            with open(self.requirements_path, 'w') as f:
                f.write(content)
            
            console.print("‚úÖ requirements.txt –æ—á–∏—â–µ–Ω –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
        
        return True
    
    def show_status(self) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞"""
        console.print("\nüìä –°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ SecretHound")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
        version = sys.version_info
        console.print(f"üêç Python: {version.major}.{version.minor}.{version.micro}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        if self.pyproject_path.exists():
            with open(self.pyproject_path, 'r') as f:
                content = f.read()
            version_match = re.search(r'version = "(\d+\.\d+\.\d+)"', content)
            if version_match:
                console.print(f"üì¶ –í–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞: {version_match.group(1)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        dependencies = self.get_current_dependencies()
        if dependencies:
            table = Table(title="–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            table.add_column("–ü–∞–∫–µ—Ç", style="cyan")
            table.add_column("–í–µ—Ä—Å–∏—è", style="green")
            
            for dep in dependencies:
                if '>=' in dep:
                    package, version = dep.split('>=', 1)
                    table.add_row(package, f">= {version}")
                else:
                    table.add_row(dep, "–ª—é–±–∞—è")
            
            console.print(table)
    
    def run_full_update(self) -> bool:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞"""
        console.print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è SecretHound...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        if not self.project_root or not self.pyproject_path or not self.pyproject_path.exists():
            console.print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª pyproject.toml")
            console.print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ SecretHound")
            console.print(f"   –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
            if self.project_root:
                console.print(f"   –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.project_root}")
            return False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        self.show_status()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
        if not self.check_python_version():
            return False
        
        # –û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π
        if not self.clean_dependencies():
            console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.update_dependencies():
            console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
        if not self.test_project_modules():
            console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞")
            return False
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é
        if not self.update_version():
            console.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–µ—Ä—Å–∏–∏")
            return False
        
        console.print("\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SecretHound –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        console.print("üìã –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ:")
        console.print("   ‚úÖ –û—á–∏—â–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–π")
        console.print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–µ—Ä—Å–∏–π")
        console.print("   ‚úÖ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π")
        console.print("   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
        console.print("\nüí° –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
        console.print("   python -m secrethound.main -t <–ø—É—Ç—å>")
        console.print("   –∏–ª–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: secrethound -t <–ø—É—Ç—å>")
        
        return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    updater = SecretHoundUpdater()
    success = updater.run_full_update()
    return 0 if success else 1

if __name__ == "__main__":
    sys.exit(main()) 